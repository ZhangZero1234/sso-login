{
  "name": "passport-idaas-openidconnect",
  "version": "1.0.0",
  "description": "Passport Authentication Strategy for IBM Bluemix Single Sign-On (SSO) service",
  "author": {
    "name": "Jared Hanson",
    "email": "jaredhanson@gmail.com",
    "url": "http://www.jaredhanson.net/"
  },
  "contributors": [
    {
      "name": "IBM"
    }
  ],
  "main": "./lib",
  "dependencies": {
    "jws": "0.2.5",
    "base64url": "0.0.6",
    "oauth": "0.9.10",
    "passport-strategy": "1.0.0"
  },
  "license": "MIT",
  "engines": {
    "node": ">= 0.4.0"
  },
  "readme": "passport-idaas-openidconnect\r\n---\r\n\r\nThis module provides the passport strategy for authenticating specifically with the Bluemix Single Sign-On service.\r\n\r\nInstall\r\n---\r\nYou may install the package using npm install command:\r\n\r\n`npm install passport-idaas-openidconnect`\r\n\r\nUninstall\r\n---\r\nTo uninstall passport-idaas-openidconnect from your system, use the npm uninstall command:\r\n\r\n`npm uninstall passport-idaas-openidconnect`\r\n\r\nOr just delete the passport-idaas-openidconnect directory.\r\n\r\nUsage\r\n---\r\n### Example\r\nBelow is a simple example of what is used to configure and use the strategy.\r\n\r\nNote: `https://myapp.mybluemix.net/auth/sso/callback` is a sample callback url.\r\n\r\n```javascript\r\nvar services = JSON.parse(process.env.VCAP_SERVICES || \"{}\");\r\nvar ssoConfig = services.SingleSignOn[0]; \r\nvar client_id = ssoConfig.credentials.clientId;\r\nvar client_secret = ssoConfig.credentials.secret;\r\nvar authorization_url = ssoConfig.credentials.authorizationEndpointUrl;\r\nvar token_url = ssoConfig.credentials.tokenEndpointUrl;\r\nvar issuer_id = ssoConfig.credentials.issuerIdentifier;\r\nvar callback_url = 'https://myapp.mybluemix.net/auth/sso/callback';\r\n\r\nvar OpenIDConnectStrategy = require('passport-idaas-openidconnect').IDaaSOIDCStrategy;\r\nvar Strategy = new OpenIDConnectStrategy({\r\n                authorizationURL : authorization_url,\r\n                tokenURL : token_url,\r\n                clientID : client_id,\r\n                scope : 'email',\r\n                response_type : 'code',\r\n                clientSecret : client_secret,\r\n                callbackURL : callback_url,\r\n                skipUserProfile : true,\r\n                issuer : issuer_id},\r\n      function(iss, sub, profile, accessToken, refreshToken, params, done) {\r\n        process.nextTick(function() {\r\n            profile.accessToken = accessToken;\r\n            profile.refreshToken = refreshToken;\r\n            done(null, profile);\r\n        })\r\n      }\r\n})\r\n\r\npassport.use(Strategy); \r\n\r\napp.get('/auth/sso/callback',function(req,res,next) {\r\n    var redirect_url = req.session.originalUrl;\r\n        passport.authenticate('openidconnect', {\r\n                successRedirect: redirect_url,\r\n                failureRedirect: '/failure',\r\n        })(req,res,next);\r\n    });\r\n\r\napp.get('/failure', function(req, res) { \r\n             res.send('login failed'); });\r\n\r\napp.get('/login', passport.authenticate('openidconnect', {})); \r\n\r\nfunction ensureAuthenticated(req, res, next) {\r\n  if(!req.isAuthenticated()) {\r\n              req.session.originalUrl = req.originalUrl;\r\n    res.redirect('/login');\r\n  } else {\r\n    return next();\r\n  }\r\n}\r\n\r\napp.get('/hello', ensureAuthenticated, function(req, res) {\r\n             res.send('Hello, '+ req.user['id'] + '!');\r\n           });\r\n```\r\n\r\n### Configure Strategy\r\nThe strategy authenticates users using the Bluemix Single Sign-On service, which includes various credentials required by the strategy, most of which are already provided by the service. Included are the client id, client secret, authorization endpoint, token endpoint, and the issuer id.\r\n\r\n```javascript\r\nvar services = JSON.parse(process.env.VCAP_SERVICES || \"{}\");\r\nvar ssoConfig = services.SingleSignOn[0]; \r\nvar client_id = ssoConfig.credentials.clientId;\r\nvar client_secret = ssoConfig.credentials.secret;\r\nvar authorization_url = ssoConfig.credentials.authorizationEndpointUrl;\r\nvar token_url = ssoConfig.credentials.tokenEndpointUrl;\r\nvar issuer_id = ssoConfig.credentials.issuerIdentifier;\r\nvar callback_url = PUT_CALLBACK_URL_HERE;\r\n\r\nvar OpenIDConnectStrategy = require('passport-idaas-openidconnect').IDaaSOIDCStrategy;\r\nvar Strategy = new OpenIDConnectStrategy({\r\n                authorizationURL : authorization_url,\r\n                tokenURL : token_url,\r\n                clientID : client_id,\r\n                scope : 'email',\r\n                response_type : 'code',\r\n                clientSecret : client_secret,\r\n                callbackURL : callback_url,\r\n                skipUserProfile : true,\r\n                issuer : issuer_id},\r\n      // This is the verify callback\r\n      function(iss, sub, profile, accessToken, refreshToken, params, done) {\r\n        process.nextTick(function() {\r\n            profile.accessToken = accessToken;\r\n            profile.refreshToken = refreshToken;\r\n            done(null, profile);\r\n        })\r\n      }\r\n})\r\n\r\npassport.use(Strategy);\r\n```\r\n\r\n### Callback URL\r\nThe callback URL is a requirement for the strategy.\r\n\r\nThe callback URL is the URL for the application that consumes the authentication tokens and retrieves the user profile. For example: `https://myapp.mybluemix.net/auth/sso/callback`\r\n\r\nCode for the callback function is also required to specify what the app does after a user logs in. Using the example mentioned above, if the callback URL is `https://myapp.mybluemix.net/auth/sso/callback`, ensure that the callback URI you specify for `app.get` is `auth/sso/callback`.\r\n\r\nThe path to the resource that was originally requested is stored in the `req.session.originalUrl` property. \r\n\r\nThe following example shows a callback function that redirects users to the page they originally requested before they logged in. If the login fails, users are directed to the `/failure` page.\r\n\r\n```javascript\r\napp.get('/auth/sso/callback',function(req,res,next) {\r\n    var redirect_url = req.session.originalUrl;\r\n        passport.authenticate('openidconnect', {\r\n                successRedirect: redirect_url,\r\n                failureRedirect: '/failure',\r\n        })(req,res,next);\r\n    });\r\n\r\napp.get('/failure', function(req, res) { \r\n             res.send('login failed'); });\r\n```\r\n\r\n### Verify Callback\r\nThe strategy requires a verify callback, which accepts various types of parameters.\r\n\r\nBy default, these are possible parameters for the verify callback:\r\n\r\n* `function (iss, sub, profile, jwtClaims, accessToken, refreshToken, params, done)`\r\n* `function (iss, sub, profile, accessToken, refreshToken, params, done)`\r\n* `function (iss, sub, profile, accessToken, refreshToken, done)`\r\n* `function (iss, sub, profile, done)`\r\n* `function (iss, sub, done)`\r\n\r\nThere is an optional attribute called `passReqToCallback` that can be added to the strategy in order to pass the request to the verify callback. This can be done by adding it in the strategy:\r\n\r\n```javascript\r\n...\r\nskipUserProfile : true,\r\nissuer : issuer_id,\r\npassReqToCallback : true},\r\n...\r\n```\r\n\r\nDoing so will result in the same types of callbacks listed above, except each callback will be appended with the request in front:\r\n\r\n* `function (req, iss, sub, profile, jwtClaims, accessToken, refreshToken, params, done)`\r\n* `function (req, iss, sub, profile, accessToken, refreshToken, params, done)`\r\n* `function (req, iss, sub, profile, accessToken, refreshToken, done)`\r\n* `function (req, iss, sub, profile, done)`\r\n* `function (req, iss, sub, done)`\r\n\r\n### `ensureAuthenticated()` and `/login` route\r\n\r\nThe `ensureAuthenticated()` method and `/login` route are also required in the app.\r\n\r\n`ensureAuthenticated()` checks if the user is already authenticated. If not, the method then stores the current url as the original url that calls the authentication request. It then redirects to the `/login` route, which will then start the authentication process using the configured strategy.\r\n\r\n```javascript\r\napp.get('/login', passport.authenticate('openidconnect', {})); \r\n\r\nfunction ensureAuthenticated(req, res, next) {\r\n  if(!req.isAuthenticated()) {\r\n      req.session.originalUrl = req.originalUrl;\r\n      res.redirect('/login');\r\n  } else {\r\n    return next();\r\n  }\r\n}\r\n```\r\n\r\nTo use `ensureAuthenticated()`, please include the method in the route to your app, such as the following test example:\r\n\r\n```javascript\r\napp.get('/hello', ensureAuthenticated, function(req, res) {\r\n             res.send('Hello, '+ req.user['id'] + '!');\r\n           });\r\n```\r\n\r\n### Test Sample\r\n\r\nNote: Be sure that your Bluemix SSO service has been properly set up.\r\n\r\nTo test to make sure your app works properly with the Bluemix Single Sign-On service, include the following code in your app:\r\n\r\n```javascript\r\napp.get('/hello', ensureAuthenticated, function(req, res) {\r\n             res.send('Hello, '+ req.user['id'] + '!');\r\n           });\r\n```\r\n\r\nAfter including this code, try going to the `/hello` route for your app after it has been successfully deployed to Bluemix.\r\n\r\nFor example: `https://myapp.mybluemix.net/hello`\r\n\r\n\r\nContact Email\r\n---\r\nPlease use this email for contact if you have questions: Security_SSO_Operations@wwpdl.vnet.ibm.com\r\n\r\nContributors\r\n---\r\n* Jared Hanson (http://www.jaredhanson.net/)\r\n* IBM\r\n\r\nLicense\r\n---\r\nMIT License\r\n\r\nCopyright (c) 2013 Jared Hanson\r\n\r\nCopyright (c) 2015 IBM\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of \r\nthis software and associated documentation files (the \"Software\"), to deal in \r\nthe Software without restriction, including without limitation the rights to \r\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\r\nthe Software, and to permit persons to whom the Software is furnished to do so,\r\nsubject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\r\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR \r\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER \r\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\r\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
  "readmeFilename": "README.md",
  "_id": "passport-idaas-openidconnect@1.0.0",
  "dist": {
    "shasum": "76b02f5463193d500e722dc99e7f54aa75a28562"
  },
  "deprecated": "Security Update: Versions below 2.0.0 are deprecated.",
  "_from": "passport-idaas-openidconnect@1.0.0",
  "_resolved": "https://registry.npmjs.org/passport-idaas-openidconnect/-/passport-idaas-openidconnect-1.0.0.tgz"
}
